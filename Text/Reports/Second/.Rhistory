c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
50*0.96
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 100)
samp_sd <- rep(NA, 100)
n <- 60
for(i in 1:100){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
sum(count, na.rm=TRUE)
samp_mean <- rep(NA, 100)
samp_sd <- rep(NA, 100)
n <- 60
for(i in 1:100){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 100)
samp_sd <- rep(NA, 100)
n <- 60
for(i in 1:100){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
samp_mean <- rep(NA, 100)
samp_sd <- rep(NA, 100)
n <- 60
for(i in 1:100){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
samp_mean <- rep(NA, 100)
samp_sd <- rep(NA, 100)
n <- 60
for(i in 1:100){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:60){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
57/60
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:60){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
sum(count, na.rm=TRUE)
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:60){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:60){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:60){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
56/60
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.75 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.75 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.75 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.75 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.95 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.95 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
mean(population)
samp_mean <- rep(NA, 60)
samp_sd <- rep(NA, 60)
n <- 60
for(i in 1:){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
mean(population)
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
47/50
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 2.575 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 2.575 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
mean(population)
count <- (lower_vector <= mean(population) & mean(population) <= upper_vector)
sum(count, na.rm=TRUE)
49/50
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 2.575 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 2.575 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 2.575 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 2.575 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtém uma amostra de n = 60 elementos da população
samp_mean[i] <- mean(samp) # salva a média amostral no i-ésimo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-ésimo elemento de samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
sample_means150 <- rep(0, 5000)
sample_means50 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
sample_means150 <- rep(0, 5000)
sample_means50 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
par(mfrow = c(2, 1))
xlimits = range(sample_means10)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means150, breaks = 20, xlim = xlimits)
sample_means150 <- rep(0, 5000)
sample_means50 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
par(mfrow = c(2, 1))
xlimits = range(sample_means50)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means150, breaks = 20, xlim = xlimits)
sd(sample_means50)
sd(sample_means150)
sample_means150 <- rep(0, 5000)
sample_means50 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
par(mfrow = c(2, 1))
xlimits = range(sample_means50)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means150, breaks = 20, xlim = xlimits)
sample_means150 <- rep(0, 5000)
sample_means50 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
par(mfrow = c(2, 1))
xlimits = range(sample_means50)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means150, breaks = 20, xlim = xlimits)
sample_means150 <- rep(0, 5000)
sample_means50 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
par(mfrow = c(2, 1))
xlimits = range(sample_means50)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means150, breaks = 20, xlim = xlimits)
sample_means150 <- rep(0, 5000)
sample_means50 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
par(mfrow = c(2, 1))
xlimits = range(sample_means50)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means150, breaks = 20, xlim = xlimits)
mean(samp)
mean(samp)
mean(samp)
mean(price)
sd(sample_means150)
sd(sample_means50)
?c
?array
getwd("/home/john/New-R-Library/New-R-Library/Text/Reports/Second")
getwd(/home/john/New-R-Library/New-R-Library/Text/Reports/Second)
setwd(/home/john/New-R-Library/New-R-Library/Text/Reports/Second)
setwd("/home/john/New-R-Library/New-R-Library/Text/Reports/Second")
require(PolsarImages)
fileHHHH <- file("HHHH.mlc", "rb")
fileHVHV <- file("HVHV.mlc", "rb")
fileVVVV <- file("VVVV.mlc", "rb")
data <- readRealMlc(fileHHHH, fileHVHV, fileVVVV, 702, 206)
plot(imagematrix(data))
require(OpenImageR)
imageShow(data)
